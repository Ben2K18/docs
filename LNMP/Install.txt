.
apt update
apt upgrade

1)install nginx
    apt install nginx-extras openssl lua5.3
  
2) intall php
apt install php7.0 php7.0-common php7.0-fpm php7.0-intl php7.0-mysql php7.0-sqlite3 \
php7.0-bcmath php7.0-curl php7.0-gd php7.0-json php7.0-readline php7.0-zip \
php7.0-bz2 php7.0-opcache php7.0-cgi php7.0-mbstring php7.0-xml php7.0-cli php7.0-mcrypt                
 

3) install mysql
   apt install mysql-server-5.7 mysql-client-5.7     
     
.configure
1) nginx
   a) io优化 /etc/fstab
      /dev/sdb1  /data  ext4  defaults,nosuid,noexec,nodev,noatime 0 0
	  
   b) 内核 
ulimit -SHn 500000
sed -i  '/End/ i  *  -   nofile 500000' /etc/security/limits.conf
sed -i '/end of pam-auth-update/ i session required pam_limits.so' /etc/pam.d/common-session 
echo  session    required   pam_limits.so >> /etc/pam.d/su
sed -i '$ a ulimit -SHn 500000' /etc/profile
  
cat >> /etc/sysctl.conf  <<_EOF_
net.ipv4.tcp_tw_recycle = 1
net.ipv4.tcp_tw_reuse = 1 
net.ipv4.tcp_syn_retries = 2
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_keepalive_time = 60
net.ipv4.tcp_fin_timeout = 30

net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_max_orphans = 262144
net.ipv4.tcp_max_syn_backlog = 262144
net.ipv4.tcp_timestamps = 0
net.ipv4.ip_local_port_range = 1024 65000
net.core.somaxconn = 262144
net.core.netdev_max_backlog = 262144
_EOF_


.) nginx.conf
user nginx;
worker_processes 8;
server_names_hash_max_size 1024;
server_name_hash_bucket_size 32/64/128;
server_tokens off;

events {
    use epoll;
    worker_connections 1024;
    multi_accept on;
}

# /etc/security/limits.conf  * - nofile 65535;
worker_rlimit_nofile 20000;  

http {
 sendfile on;
 tcp_nodelay on;
 
 keepalive_timeout 65;	 
 send_timeout 60;
 
 client_max_body_size 30m;
 client_body_timeout 60;
 client_header_timeout 60;
 ...
}
    
.) default server
server {
         listen 80  default_server;
         server_name  _; 
         return 403;
}
  
.) 限制单IP访问次数
http {
           limit_req_zone $binary_remote_addr zone=perip:10m rate=59r/s; 
           server {
                location /search/ {
                    limit_req zone=perip burst=100 [nodelay];
                }
            }  
}


.) 基本配置
server {
		 
         if ( $request_method !~ ^(GET|HEAD|POST)$ ) {
             deny all;
         }

         if ($http_user_agent ~* (wget|curl) ) {
             return 404;
         }		
		 
         location ~/\.ht {
             deny all;
         }
		
         #if ( $host !~ ^www\. ) {
         #   return 301 http://www.$host$request_uri;
         #}		 

         #location ~ ^/attachements/.*\.(php|php5|php4|sh|pl|py)$ {
         #    deny all;
         #}
  
         #location ~ ^/admin/ {
         #    allow x.x.x.x;
         #    deny all;
         #}

         location ~* \.(js|css|jpg|jpeg|gif|png|swf)$ {
             if (-f $request_filename) {
                  access_log off;
                  expires 1h;
                  break;
             }
         }

         # cache.appcache, your document html and data
         location ~* \.(?:manifest|appcache|html?|xml|json)$ {
             expires -1;
         }

         # Feed
         location ~* \.(?:rss|atom)$ {
             expires 1h;
             add_header Cache-Control "public";
         }

         # Media: images, icons, video, audio, HTC
         location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
            expires 1M;
            access_log off;
            add_header Cache-Control "public";
         }

         # CSS and Javascript
         location ~* \.(?:css|js)$ {
            expires 1y;
            access_log off;
            add_header Cache-Control "public";
         }		 
		 
         location = /favicon.ico {
            log_not_found off;
            access_log off;
         }
		 
	 location ~ robots$ {
            log_not_found off;
            access_log off;
         }
		
         location / {
             ...
	     #跨域ajax调用
             #add_header Access-Control-Allow-Origin *;
	
	     #iframe
	     #add_header X-Frame-Options DENY;
             add_header X-Frame-Options SAMEORIGIN; 
        
             #禁止服务器自动解析资源类型
             add_header X-Content-Type-Options nosniff;

             #防XSS攻擊
             add_header X-Xss-Protection 1;	
	         ...
         }
} 

.) php
server {
	     location ~ \.php$ {
                fastcgi_pass    127.0.0.1:9002;
                fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
                include  fastcgi_params;
         }
}

.) https
a) 生成 dhparam.pem
 $ openssl dhparam -out /etc/nginx/ssl/dhparam.pem 
 
b) 配置 
server
{ 		 
    server_name a.com www.a.com;

    ssl on;
    listen 80;
    listen 443 ssl;
    
    ssl_dhparam ssl/dhparam.pem;
    ssl_certificate     /etc/nginx/ssl/a.com.crt;
    ssl_certificate_key /etc/nginx/ssl/a.com.key;

    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    #ssl_ciphers         HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
    
    ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4";
    ssl_session_cache   builtin:1000  shared:SSL:10m; 
    ssl_session_timeout 5m;

    #HSTS策略
    #https://hstspreload.org/ 申请时，必须把if ( $host !~ ^www\. ) {  return 301 https://www.$host$request_uri; } 注释掉

    #保护客户端从HTTP拦截，从它看到STS头部到声明的max-age的期间内。
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    #优先采取服务器算法
    ssl_prefer_server_ciphers on;

    #减少点击劫持
    add_header X-Frame-Options DENY;

    #禁止服务器自动解析资源类型
    add_header X-Content-Type-Options nosniff;

    #防XSS攻擊
    add_header X-Xss-Protection 1;

    if ( $host !~ ^www\. ) {
       return 301 https://www.$host$request_uri;
    }

    if (  $scheme ~ http$ )
    {
       return 301 https://$host$request_uri;
    } 
    
    root html;
    location / {
          ....
    }
} 

.) realip
http {
         #删除以下IP,然后后端得到的X-Forwarded-For IP才是真实IP
         set_real_ip_from 1.1.1.1;
         set_real_ip_from 2.2.2.2;
         set_real_ip_from 192.168.1.0/24;

         real_ip_header X-Forwarded-For;
         real_ip_recursive on;
           
         #access.log
         log_format main  ... ip="$remote_addr" ...;
}

.php:
         $_SERVER['REMOTE_ADDR'];


    s) proxy pass
server {	
       location /some/path/ {
           proxy_pass  http://www.a.com/link/;
       }

       location /some/path/ {
           proxy_set_header  Host  $host;
           proxy_set_header  X-Real-IP $remote_addr;
           proxy_set_header Accept-Encoding "";
        
           proxy_buffering off;
           proxy_buffers  16  4k;
           proxy_buffer_size 2k;
           proxy_pass  http://localhost:8000;
       }
}	   

.) upstream
proxy_next_upstream http_502 http_504 http_404 error timeout invalid_header;

upstream a-com {
      ip_hash;
      server 8.8.8.5:80 max_fails=1 fail_timeout=3s weight=5 ;
      server 8.8.8.6:80  max_fails=1 fail_timeout=3s backup|down|  max_fails=3 fail_timeout=30s|keepalive 32; ;
}

upstream a-com {
       server 8.8.8.5:80 max_fails=1 fail_timeout=3s;        
       server 8.8.8.6:80 max_fails=1 fail_timeout=3s backup;
}

.) status
server {
           location ~ ^/NginxStatus/ {
                stub_status on;
                access_log off;
                allow 122.152.166.126;
                allow 116.50.179.64/29;
                deny all;
           }       
}
	 
.) authentication
.创建密码
$ printf "username:$(openssl passwd -crypt password)\n"  > /tmp/passwd

server {
      location /  {
              auth_basic "nginx basic http test for ttlsa.com";
              auth_basic_user_file /tmp/passwd; 
      }
}             


输入: username
密码: password   

 

.) server name
server {
        server_name ~^(www\.)?c.com$ ~^(www\.)?d.com$;
}
         
.) ajax跨域 
server {
         location / {
	     #add_header Access-Control-Allow-Origin: * ;
             add_header 'Access-Control-Allow-Origin' 'http://other.subdomain.com';
	     #当该标志为真时，响应于该请求是否可以被暴露
             add_header 'Access-Control-Allow-Credentials' 'true';
             add_header 'Access-Control-Allow-Methods' 'GET,POST';
         }
} 


成功时，响应头是如下所示：
Access-Control-Allow-Origin: other.subdomain.com
         
.) expires
server {
        location ~* \.(js|css|jpg|jpeg|gif|png|swf)$ {
             if (-f $request_filename) {
                  access_log off;
                  expires 1h;
                  break;
             }
        }

        # cache.appcache, your document html and data
        location ~* \.(?:manifest|appcache|html?|xml|json)$ {
             expires -1;
        }

        # Feed
        location ~* \.(?:rss|atom)$ {
             expires 1h;
             add_header Cache-Control "public";
        }

        # Media: images, icons, video, audio, HTC
        location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
            expires 1M;
            access_log off;
            add_header Cache-Control "public";
        }

        # CSS and Javascript
        location ~* \.(?:css|js)$ {
           expires 1y;
           access_log off;
           add_header Cache-Control "public";
        }
}
		
.) error_page
server {
        error_page  404  /404.html;
        error_page 404 =301  http://www.a.com/404.html;
}
        
.) header
server {
        proxy_set_header Host $host;
        add_header gzip_ratio "gzip_ratio";

        add_header X-Accel-Expires 10800;
        add_header Cache-Control 'max-age=10800';

        #忽略Set-Cookie头
        proxy_ignore_headers Cache-Control Set-Cookie;
        proxy_ignore_headers Cache-Control Set-Cookie Vary;		
		
}        
		
.) htaccess
server {
        location ~/\.ht {
           deny all;
        }
}
        
.) if..else
server {
         #not allow ip , can not access the uri
         if ( $uri ~* "^/admin" ) {
                set $allowip 1;
         }

         if ( $remote_addr !~* "^(1.1.1.1|2.2.2.2)" ) {
                set $allowip 1$allowip;
         }

         if ( $query_string ~* "^key=passwd" ) {
                add_header Set-Cookie cookp=passwded;
                set $allowip 1;
         }

         if ( $http_cookie ~* "cookp=passwded" ) {
                set $allowip 1;
         }

         if ( $allowip = 11 )
         {
            return 404;
         }
         #~not allow ip , can not access the uri                
}
 
         
         
.) mp3/mp4
server {
         location ~ \.(mp3|mp4) {
            root  /www/media;
         }
        
         location /mp3 {
            sendfile on;
            sendfile_max_chunk  1m;
            tcp_nopush on;
             
            tcp_nodelay  on;
            keepalive_timeout  65;
         }
	     
         location /flv/ {
              flv;
              limit_rate_after 500k;
              limit_rate 50k;
         } 
     
         location /video/ {
             sendfile on;
             tcp_nopush on;
             aio on;
         }
}
             
			
            
.) 防盗链
server {
          location ~* \.(gif|jpg|swf)$ {
               #合法的来源域名
               valid_referers none blocked a.com google.com baidu.com so.com;
 
               #其它域名以外的域名则跳转到指定图片
               if ($invalid_referer) {
                     rewrite ^/ http://$host/logo.png;
               }
           }
}		   
	  


.) mono .net
 $ sudo apt-get install mono-fastcgi-server mono-fpm-server  
 $ sudo mkdir /var/www/html/www.a.com 
 $ sudo vim /etc/init.d/nginx  添加如下一行
  
   nc -w 1 127.0.0.1 9000  || ( /usr/bin/fastcgi-mono-server4 /socket=tcp:127.0.0.1:9000 /applications=/:/data/www/htdocs/front.a.com/ & )

 $ sudo  vim /etc/nginx/site-enabled/www.a.com 
 server {
    listen 80;
    server_name www.a.com;

    root /var/www/html/www.a.com;
    
    #.aspx
    location ~ \.aspx$ {
        proxy_set_header Host $host;
        include /etc/nginx/fastcgi_params;
        fastcgi_param  PATH_INFO  "";
	fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        fastcgi_pass 127.0.0.1:9000;
       	fastcgi_index /;
        #fastcgi_index index.aspx;
    }
    
    #mvc
    location / {
	 proxy_set_header Host $host;
         include /etc/nginx/fastcgi_params;
	 fastcgi_param  PATH_INFO  "";
	 fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
         fastcgi_pass 127.0.0.1:9001;
	 fastcgi_index /;
         #fastcgi_index index.aspx;
    }
}

$ sudo vim /var/www/html/www.a.com/test.aspx
<%@ Page Language="C#" AutoEventWireup="true" %>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
</head>
<body>
    <div>
    <% var test = String.Format("Hello World! Got an aspx page running on nginx!!!\r\n{0}",System.DateTime.Now); %>
    <%= test %>
    </div>
</body>
</html>

$ lynx http://www.a.com/test.aspx



.) proxy hidden domain name
upstream www-a.com {
    server 8.2.7.33:8080;
}

server
{
     listen  80;
     server_name  www.b.com b.com;

     location /
     {
         proxy_redirect off;
	 proxy_set_header  X-Real-IP  $remote_addr;
         proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
         #重点Host, 让后端以为访问的是www.a.com
         proxy_set_header Host www.a.com;
         proxy_pass http://www-a-com;
     }
 }

.) websocket

map $http_upgrade $connection_upgrade {
     default upgrade;
     ''    close;
}      

upstream www-a.com {
     server 8.2.7.33:8080;
}

server {
	 
          location / {
          	  proxy_set_header Host $host;
          	  proxy_set_header X-Real-IP $remote_addr;
          	  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  
          	  proxy_connect_timeout 600;
          	  proxy_read_timeout 600;
          	  proxy_send_timeout 600;
          	  proxy_buffer_size 32k;
          	  proxy_buffers 4 32k;
                  
          	  proxy_busy_buffers_size 64k;
          	  proxy_temp_file_write_size 1024m;
          	  proxy_ignore_client_abort on;	
          		
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "Upgrade";
          		
                  proxy_pass http://chat-a.com;
          }
}
	  
.) rewrite
server {
        if ( $host !~ ^www\. ) {
             return 301 http://www.$host$request_uri;
        }
}

server {
        server_name  a.com  www.a.com;
        server_name  ~^(www\.)?b.com;
        
        set $sname "a.com";
        if ( $host = $sname ) {
             return 301 http://www.$host$request_uri;
        }
}

server {
  listen 80;
  rewrite ^(/users/\w+)$ https://$host$1 permanent;
}

server {
        if ($request_uri !~ "^/users/\w+$")
        {
           return 301 https://$host$request_uri;
        }

        if ($http_user_agent ~ MSIE) {
            rewrite ^(.*)$ /msie/$1 break;
        }

        if ($http_cookie ~* "id=([^;]+)(?:;|$)") {
            set $id $1;
        }

        if ($request_method = POST) {
           return 405;
        }

        if ($slow) {
            limit_rate 10k;
        }

        if ($invalid_referer) {
            return 403;
        }
}

server {
    ...
    rewrite ^(/download/.*)/media/(.*)\..*$ $1/mp3/$2.mp3 last;
    rewrite ^(/download/.*)/audio/(.*)\..*$ $1/mp3/$2.ra  last;
    return  403;
    ...
}
 
server {
         location /download/ {
             rewrite ^(/download/.*)/media/(.*)\..*$ $1/mp3/$2.mp3 break;
             rewrite ^(/download/.*)/audio/(.*)\..*$ $1/mp3/$2.ra  break;
             return  403;
        }
}

server {
         rewrite ^/users/(.*)$ /show?user=$1? last;
}

server {
          location /download/ {
              if ($forbidden) {
                 return 403;
              }

              if ($slow) {
                 limit_rate 10k;
              }

              rewrite ^/(download/.*)/media/(.*)\..*$ /$1/mp3/$2.mp3 break;
          }
}

.) sub_filter, 字符串替换
server {
          location / {
               sub_filter /blog/ /blog-staging/;
               sub_filter_once off;
          }

          location / {
                sub_filter 'href="http://127.0.0.1:8080/'  'href="http://$host/';
                sub_filter 'img src="http://127.0.0.1:8080/' 'img src="http://$host/';
                sub_filter_once on;
          }
	  
          location /users/ {
                rewrite ^/users/(.*)$  /show.php?uid=$1 break;
          }
}

server {
    rewrite ^(/download/.*)/media/(.*)\..*$  $1/mp3/$2.mp3 last;
    rewrite ^(/download/.*)/audio/(.*)\..*$  $1/mp3/$2.ra last;
}


.) 内核修改 
#启用timewait快速回收
net.ipv4.tcp_tw_recycle = 1

#开启timewait重新使用
net.ipv4.tcp_tw_reuse = 1

#当SYN等待队列溢出时使用Cookies来处理(默认为1)
net.ipv4.tcp_syncookies = 1

#默认65536
net.ipv4.tcp_max_orphans = 262144

#记录尚未收到客户端确认信息的连接请求的最大值(默认为512)
net.ipv4.tcp_max_syn_backlog = 262144

#默认1
net.ipv4.tcp_timestamps = 0

#内核向客户端发送SYN ACK的重试次数（默认5）
net.ipv4.tcp_synack_retries = 1

#内核放弃建立连接之前发送SYN包的次数 （默认6）
net.ipv4.tcp_syn_retries = 1

#连接保持在FIN-WAIT-2状态多长时间后，本端关闭连接, 对端可能永远不关闭连接
net.ipv4.tcp_fin_timeout = 1

#默认60
net.ipv4.tcp_keepalive_time = 30

#默认 32768	61000
net.ipv4.ip_local_port_range = 1024 65000

#默认128
net.core.somaxconn = 262144

#默认1000
#网卡接收速率比内核处理速度快时，把数据包放入队列，默认300
net.core.netdev_max_backlog = 262144
