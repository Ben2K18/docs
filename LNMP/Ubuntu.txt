.vg

..extend lv
#df -h  
  /dev/mapper/vg_ora-lv_ora   99G   79G   16G  84% /ora
   
#vgdisplay
  VG Name               vg_ora 
  VG Size               200.00 GiB
  Free  PE / Size       25599 / 100.00 GiB 
    
#lvdisplay
  LV Path                /dev/vg_ora/lv_ora
  LV Name                lv_ora
  VG Name                vg_ora
  LV Size                100.00 GiB
 
#lvextend -L +40g /dev/vg_ora/lv_ora

#lvdisplay
  LV Path                /dev/vg_ora/lv_ora
  LV Name                lv_ora
  VG Name                vg_ora
  LV Size                140.00 GiB

#mount -l
 /dev/mapper/vg_ora-lv_ora on /ora type ext4 (rw,noatime,data=ordered) 
 
#resize2fs /dev/mapper/vg_ora-lv_ora 140G

#df -h  
  /dev/mapper/vg_ora-lv_ora  138G   79G   53G  60% /ora

.DVD做apt source
mount -t iso9660 -o loop ubuntu.iso /mnt/cdrom
cp /etc/apt/sources.list /etc/apt/sources.list.bak
apt-cdrom -m -d /mnt/cdrom add

.cdrecord
apt install cdrecord
cdrecord -scanbus
cdrecord -v speed=24 dev=1,0,0 -data a.iso

apt install dvd+rw-tools
growisofs -dvd-compat -Z /dev/dvd=/tmp/a.iso

apt install brasero

.分区工具
apt install gparted

.Ext

.grub
#默认加载第一个title
default=0

timeout=5

#进入grub时使用的密码(明文)
password=123456

#进入grub时使用的密码(密文方式)
# grub-md5-crypt
#   Password: xxxx
#   Retype password:xxxx
#   $1...MS0
password --md5 $1...MS0

#默认不显示grub菜单，如果要显示则需要按ESC键
hiddenmenu

title Ubuntu7.10

#root指/boot分区位置
#hd0,0 表示第一个硬盘，第一个分区

#指定启动时使用的内核
kernel /vmlinuz-2.6.22-14-generic

#引导时的初始RAMDISK, 它包含启动时kernel所需的设备驱动模块
initrd /initrd.img-2.6.22-14-generic
root (hd0,0)

quiet

.grub 交互命令
 boot
 引导已经被指定并载入的操作系统或链式装载程序
 
 chainloader
 将指定的文件做为一个链式装载程序载入， 为将启动的控制权交给某个分区用来启动的第一个扇区，可以使用+1参数来指定
 
 displaymem
 显示当前内存的使用情况
 
 initrd
 指定引导时可用的RAM盘
 
 install p
 安装grub到系统的主引导记录
 
 kernel
 指定kernel从grub的根文件系统中载入
 options选项用在kernel命令后面，在内核载入时传给内核
 
 root
 将grub的根分区设置成特定的设备和分区，如(hd0,0)
 
 rootnoverify
 同root,只是不载入分区
 
 .grub恢复
使用启动盘，进入grub控制台
grub> root (hd0,0)
grub> setup (hd0,0)

或进入系统后
假设/boot磁盘分区在/dev/sda
# grub-install /dev/sda

.nvidia显卡驱动
到http://www.nvidia.com/page/home.html下载NVIDIA-Linux-x86-..-pkgl.run
apt-get --purge remove nvidia-glx nvidia-glx-new
apt-get install build-essential pkg-config xserver-xorg-dev linux-headers-`uname -r`
vim /etc/default/linux-restricted-modules-common
在最后的双引号中添加 nv nvidia_new

/etc/init.d/gdm stop
./NVIDIA-Linux...-pkgl.run
/etc/init.d/gdm restart

.允许root登录图形系统
 系统-- 系统管理 -- 登录窗口 -- 安全 -- 允许本地系统管理员登录
 
.开机启动程序
1)图形
系统 -- 首选项 -- 会话 添加

2)命令行
 cp a.sh /etc/init.d/
 update-rc.d a.sh defaults
 update-rc.d -f a.sh remove
 
.sudo
 user localhost=(ALL) ALL
 user localhost=/usr/sbin/shutdown,/usr/sbin/halt
 %group localhost=/usr/sbin/shutdown,/usr/sbin/halt
 
 HOSt_Alias HOST=localhost,192.168.1.2
 User_Alias USER=u1,u2,u3
 Cmnd_Alias CMDS=/usr/bin/shutdown
 USER HOST=CMDS
 
 user ALL=(ALL) NOPASSWD: ALL
 
2)查看当前用户可执行的命令
  sudo -l
  
  延长密码有效时间
  sudo -v
  
  强迫用户下一次执行sudo输入密码
  sudo -k
  
.cd
cd ..
cd ~
cd -
cd -- -aa

.cp
 -a 复制时保留链接、文件属性、并递归复制目录
 -b 删除或覆盖时进行备份
 -S xxx  指定备份时的文件后缀
 -d 复制时保留链接
 -f 强制操作而不进行任何提示
 -p 复制时保留文件的修改时间、权限、所有者
 -r 复制目录时，进行递归复制
 -l 制作软件链接
 
.mkdir
  -m 700 创建目录时指定读写执行权限
  -p 一次创建多级目录
  mkdir -m 755 abc
  
.tar 
  -c 创建档案文件
  -v 显示过程
  -f 指定档案文件名
  -r 追加文件到档案文件尾部
  -t 列出档案文件内的所有文件
  -u 更换档案文件内的文件
  -x 释放档案文件中的某个文件
  -k 还原时不进行同名文件覆盖
  -m 还原时修改所有文件的修改时间为现在时间
  -M 分卷
  -z 进行gzip压缩
  -j 进行bzip2压缩
  -p 使用原文件的原来属性
  -P 可使用绝对路径进行压缩
  -N "2017/12/08" 只添加指定日期以后的文件
  --exclude FILE 不压缩FILE
  -C dir 解压到指定目录中
  tar -xzvf a.tar.gz -C /tmp/a/
  
  
